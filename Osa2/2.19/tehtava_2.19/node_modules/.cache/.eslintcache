[{"C:\\Users\\jerem\\Documents\\GitHub\\Fullstack-developer-course\\Osa2\\2.19\\tehtava_2.19\\src\\index.js":"1","C:\\Users\\jerem\\Documents\\GitHub\\Fullstack-developer-course\\Osa2\\2.19\\tehtava_2.19\\src\\App.js":"2","C:\\Users\\jerem\\Documents\\GitHub\\Fullstack-developer-course\\Osa2\\2.19\\tehtava_2.19\\src\\Services\\notes.js":"3","C:\\Users\\jerem\\Documents\\GitHub\\Fullstack-developer-course\\Osa2\\2.19\\tehtava_2.19\\src\\Components\\Note.js":"4","C:\\Users\\jerem\\Documents\\GitHub\\Fullstack-developer-course\\Osa2\\2.19\\tehtava_2.19\\src\\Components\\Notification.js":"5","C:\\Users\\jerem\\Documents\\GitHub\\Fullstack-developer-course\\Osa2\\2.19\\tehtava_2.19\\src\\Components\\GoodNotification.js":"6"},{"size":158,"mtime":1668414666341,"results":"7","hashOfConfig":"8"},{"size":6332,"mtime":1670857798853,"results":"9","hashOfConfig":"8"},{"size":1697,"mtime":1668431665187,"results":"10","hashOfConfig":"8"},{"size":414,"mtime":1668431665186,"results":"11","hashOfConfig":"8"},{"size":233,"mtime":1668414666341,"results":"12","hashOfConfig":"8"},{"size":278,"mtime":1668414666340,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kfj5an",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jerem\\Documents\\GitHub\\Fullstack-developer-course\\Osa2\\2.19\\tehtava_2.19\\src\\index.js",[],[],"C:\\Users\\jerem\\Documents\\GitHub\\Fullstack-developer-course\\Osa2\\2.19\\tehtava_2.19\\src\\App.js",["34","35","36","37"],[],"import {useState, useEffect} from 'react'\r\nimport Note from './Components/Note'\r\nimport noteService from './Services/notes'\r\nimport Notification from './Components/Notification'\r\nimport GoodNotification from './Components/GoodNotification'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br/>\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2022</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [successMessage, setSuccessMessage] = useState(null)\r\n  const [newNumber, setNewNumber] = useState('')\r\n\r\n  useEffect(() => {\r\n    noteService\r\n    .getAll() //getAll()\r\n    .then(initialNotes => {\r\n      setNotes(initialNotes)\r\n    })\r\n}, [])\r\n\r\n\r\n\r\n  const toggleImportanceOf = id => {\r\n    //Jokaiselle muistiinpanolle id-kenttään perustuva yksilöivä url.\r\n    //const url = `http://localhost:3001/notes/${id}`\r\n    //Taulukon find-metodilla etsitään muutettava muistiinpano ja talletetaan muuttujaan -note- viite siihen. \r\n    const note = notes.find(n => n.id === id)\r\n    //Luodaan uusi olio, jonka sisältö on sama kuin vanhan olion sisältö. Poislukien kenttä important.\r\n    const changedNote = {...note, important: !note.important}\r\n\r\n    /*\r\n    axios.put(url, changedNote).then(response => {\r\n      setNotes(notes.map(note => note.id !== id ? note : response.data))\r\n    })\r\n    */\r\n  noteService\r\n  .update(id, changedNote).then(returnedNote => {\r\n    setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n  })\r\n  .catch(error => {\r\n    setErrorMessage(\r\n      `the note '${note.name}' was already deleted from server` //'${note.content}'\r\n    )\r\n    setTimeout(() => {\r\n      setErrorMessage(null)\r\n    }, 5000)\r\n    setNotes(notes.filter(n => n.id !== id))\r\n  })\r\n}\r\nconst deleteObjectOf = id => {\r\n  const deleteNote = notes.find(n => n.id === id)\r\n  const deletedNote = {...deleteNote}\r\n\r\n  const confirm = window.confirm(`Are you sure?`)\r\n  if(confirm) {\r\n    noteService\r\n    .deleteThis(id, deletedNote).then(deletednote => {\r\n      //setNotes(notes.map(note => note.id ? note : deletednote))\r\n      setNotes(notes.filter(n => n.id !== id))\r\n      setSuccessMessage(\r\n        `the user was successfully deleted.`\r\n      )\r\n      setTimeout(() => {\r\n        setSuccessMessage(null)\r\n      }, 5000)\r\n    })\r\n    .catch(error => {\r\n      setErrorMessage(\r\n        `the user '${deleteNote.name}' was already deleted from the server.`\r\n      )\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n      setNotes(notes.filter(n => n.id !== id))\r\n    })\r\n  } else {\r\n  \r\n}\r\n}\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault() \r\n    const noteObject = {\r\n      name: newNote,\r\n      number: newNumber,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n    }\r\n    \r\n    //event.target.reset()\r\n    /*\r\n    axios\r\n          .post('http://localhost:3001/notes', noteObject)\r\n          .then(response => {\r\n            setNotes(notes.concat(response.data))\r\n            setNewNote('')\r\n          }) \r\n    */\r\n          \r\n  if (notes.findIndex((p) => p.name == newNote) == -1 ) {\r\n    noteService\r\n    .create(noteObject)\r\n    .then(returnedNote => {\r\n      setNotes(notes.concat(returnedNote))\r\n      setNewNote('')\r\n      setNewNumber('')\r\n      setSuccessMessage(\r\n        `the user was successfully added.`\r\n      )\r\n      setTimeout(() => {\r\n        setSuccessMessage(null)\r\n      }, 5000)\r\n    })\r\n    .catch(error => {\r\n      const errorData = error.response.data\r\n      console.log(error)\r\n        setErrorMessage(\r\n          `'${errorData.error}'`\r\n          //`Person validation failed: '${errorData.error}'`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 10000)\r\n        console.log(errorData.error)\r\n    })\r\n  }\r\n  if (notes.findIndex((p) => p.name == newNote) != -1 ) {\r\n    const confirm = window.confirm(`Name '${newNote}' already exists, replace new number?`)\r\n\r\n    if(confirm) {\r\n      console.log('Korvaamisen pitäisi tapahtua')\r\n      // {number: }\r\n      const findtheguy = notes.find(n => n.name === newNote)\r\n      console.log(findtheguy.id)\r\n\r\n      const note = notes.find(n => n.id === findtheguy.id)\r\n      console.log(note)\r\n\r\n      const replacedNote = {...note, number: newNumber}\r\n      console.log(replacedNote)\r\n\r\n      noteService\r\n      .replace(note.id, replacedNote).then(returnedNote => { //note.id\r\n        setNotes(notes.map(note => note.number !== newNumber ? note : returnedNote))\r\n        \r\n        setSuccessMessage(\r\n          `the user's number was successfully changed.`\r\n        )\r\n        setTimeout(() => {\r\n          setSuccessMessage(null)\r\n        }, 5000)\r\n      })\r\n      setTimeout(() => {\r\n        window.location.reload()\r\n      }, 5000)\r\n  }\r\n  }\r\n  }\r\n  \r\n  \r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n\r\n  }\r\n  const notesToShow = showAll\r\n  ? notes\r\n  : notes.filter(note => note.important)\r\n\r\n  return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n        \r\n       <form onSubmit={addNote}>\r\n        <div>\r\n        Name: <input \r\n        value={newNote}\r\n        onChange={handleNoteChange}\r\n        />\r\n        </div>\r\n        <div>\r\n          Number: <input value={newNumber} onChange={handleNumberChange} ></input>\r\n        </div>\r\n        <button >Save</button>\r\n       </form>\r\n\r\n       <div>\r\n        <h2>Numbers</h2>\r\n        <Notification message={errorMessage} />\r\n        <GoodNotification goodMessage={successMessage} />\r\n        <ul>\r\n          {notesToShow.map(note =>\r\n            <Note key={note.id} note={note} deleteObject={() => deleteObjectOf(note.id) } toggleImportance={() => toggleImportanceOf(note.id)} />\r\n       )}       \r\n       </ul>\r\n\r\n         <button onClick={() => setShowAll(!showAll)}>\r\n            show {showAll ? 'important' : 'all' }\r\n          </button>  \r\n          <Footer/>\r\n        </div>\r\n\r\n      </div>\r\n  )\r\n}\r\nexport default App","C:\\Users\\jerem\\Documents\\GitHub\\Fullstack-developer-course\\Osa2\\2.19\\tehtava_2.19\\src\\Services\\notes.js",["38","39","40","41"],[],"import axios from 'axios'\r\nconst baseUrl = '/api/notes' //'/api/notes' //http://localhost:3001/notes //\r\nconst baseUrl2 = 'http://localhost:3001/api/persons'\r\nconst baseUrl3 = 'http://localhost:3001/api/persons/'\r\nconst baseUrl4 = './api/persons'\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl2)\r\n    /*\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to server',\r\n        date: '2022-09-26',\r\n        important: true,\r\n    }\r\n    */\r\n    //return request.then(response => response.data.concat(nonExisting))\r\n    return request.then(response => response.data)\r\n}\r\nconst getAll2 = () => {\r\n    const request = axios.get(baseUrl2)\r\n    return request.then(response => response.data)\r\n}\r\n/*\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n\r\n  return request.then(response => response.data)\r\n}\r\n*/\r\n\r\nconst create = async newObject => {\r\n    const request = axios.post(baseUrl2, newObject)\r\n    return request.then(response => response.data)\r\n}\r\nconst replace = async (id, newObject) => {\r\n    const request = axios.put(`${baseUrl2}/${id}`, newObject)\r\n    return request.then(response => response.data) //\r\n}\r\nconst update = async (id, newObject) => {\r\n    const request = axios.put(`${baseUrl2}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\nconst deleteThis = async (id, newObject) => {\r\n    //console.log(JSON.stringify(request.headers))\r\n    const request = axios.delete(baseUrl2 + \"/\" + id, newObject)\r\n    console.log(request)\r\n    console.log(baseUrl2 + \"/\" + id)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, deleteThis, replace, getAll2 }","C:\\Users\\jerem\\Documents\\GitHub\\Fullstack-developer-course\\Osa2\\2.19\\tehtava_2.19\\src\\Components\\Note.js",[],[],"C:\\Users\\jerem\\Documents\\GitHub\\Fullstack-developer-course\\Osa2\\2.19\\tehtava_2.19\\src\\Components\\Notification.js",[],[],"C:\\Users\\jerem\\Documents\\GitHub\\Fullstack-developer-course\\Osa2\\2.19\\tehtava_2.19\\src\\Components\\GoodNotification.js",[],[],{"ruleId":"42","severity":1,"message":"43","line":116,"column":37,"nodeType":"44","messageId":"45","endLine":116,"endColumn":39},{"ruleId":"42","severity":1,"message":"43","line":116,"column":49,"nodeType":"44","messageId":"45","endLine":116,"endColumn":51},{"ruleId":"42","severity":1,"message":"43","line":143,"column":37,"nodeType":"44","messageId":"45","endLine":143,"endColumn":39},{"ruleId":"42","severity":1,"message":"46","line":143,"column":49,"nodeType":"44","messageId":"45","endLine":143,"endColumn":51},{"ruleId":"47","severity":1,"message":"48","line":2,"column":7,"nodeType":"49","messageId":"50","endLine":2,"endColumn":14},{"ruleId":"47","severity":1,"message":"51","line":4,"column":7,"nodeType":"49","messageId":"50","endLine":4,"endColumn":15},{"ruleId":"47","severity":1,"message":"52","line":5,"column":7,"nodeType":"49","messageId":"50","endLine":5,"endColumn":15},{"ruleId":"53","severity":1,"message":"54","line":51,"column":1,"nodeType":"55","endLine":51,"endColumn":72},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'baseUrl' is assigned a value but never used.","Identifier","unusedVar","'baseUrl3' is assigned a value but never used.","'baseUrl4' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration"]